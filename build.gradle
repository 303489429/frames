//plugins {
//    id 'java'
//}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.google.protobuf'

//apply plugin: 'lombok'

group = 'com.frame.example'
version = '0.1-SNAPSHOT'
sourceCompatibility = '1.8'


repositories {
    mavenCentral()
}

dependencies {
    //Gradle Groovy DSL
    implementation 'org.redisson:redisson:3.10.5'
    //Gradle Kotlin DSL
    annotationProcessor 'org.projectlombok:lombok:1.18.6'
    compileOnly 'org.projectlombok:lombok:1.18.6'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.6'
    testCompileOnly 'org.projectlombok:lombok:1.18.6'

//    compile("org.projectlombok:lombok:1.18.6")
    compile("cglib:cglib:2.2.2")
    //disruptor 无锁的缓存框架（高性能的生产者消费者
    compile("com.lmax:disruptor:3.3.4")
    //netty 2019-04-02
    compile("io.netty:netty-all:4.1.34.Final")
    //caffeine 高性能本地缓存
    compile("com.github.ben-manes.caffeine:caffeine:2.7.0")
    //
    compile group: 'io.netty', name: 'netty-all', version: '4.1.33.Final'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.6.1'
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.6.1'
    compile 'org.apache.thrift:libthrift:0.12.0'
    /** gRPC 配置*/
    //基于netty 传输
    compile 'io.grpc:grpc-netty-shaded:1.19.0'
    //基于protobuf 做通讯协议
    compile 'io.grpc:grpc-protobuf:1.19.0'
    compile 'io.grpc:grpc-stub:1.19.0'

    implementation 'junit:junit:4.12'
}

//gRPC 插件用于自动生成代码，默认目录 src/main/proto
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.6.1"
        //设备生成实体类目录
        generatedFilesBaseDir = "src"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.19.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                //设置生成的GRPC服务类目录
                setOutputSubDir 'java'
            }
        }
    }
}


idea {
    module {
//        downloadJavadoc = true
        downloadSources = true
    }
}


//gradle api

/*println " root file path is:"+getRootDir().absolutePath

println " project file path is:"+getProjectDir().absolutePath

println " build file path is:" + getBuildDir().absolutePath

println getContent("NioTest13_in.txt")

def getContent(String path) {
    def file = file(path)
    return file.text

}*/
//----------文件拷贝-----
/*copy {
    from file("NioTest13_in.txt")
    into this.getRootProject().getBuildDir()
    //排查文件
    exclude {}
    //重命名
    rename {}
}*/

//文件内存映射，对文件树进行遍历

/*
fileTree("out") { FileTree fileTree ->
    fileTree.visit { FileTreeElement element ->
        println 'the file name is:' + element.name
        copy {
            from element.file
            into getRootProject().getBuildDir().path + "/test/"
        }
    }
}*/

